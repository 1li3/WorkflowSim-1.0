{"name":"WorkflowSim","tagline":"Workflow Simulator for Scheduling, Clustering and Provisioing studies","body":"### Welcome to WorkflowSim Pages.\r\nWorkflowSim is a workflow simulator to support large-scale scheduling, clustering and provisioning studies. It is developed by Weiwei Chen, a Phd student from University of Southern California under the Apache License version 2.0. WorkflowSim is not yet fully completed and we welcome your contribution to this project. \r\n\r\nThis page introduces the basic features of WorkflowSim and how to install and run it with Eclipse or NetBeans.\r\n\r\n### 1. Use WorkflowSim with GitHub\r\n\r\n( It is suggested to use WorkflowSim if you are going to contribute back to this project, otherwise it is not required. )\r\n\r\nWe provide a youtube video to show the process described below. (http://www.youtube.com/watch?v=MvpPzZpMDzg)\r\n\r\n1.1 Register a GitHub account and fork your own branch\r\n\r\nGo to the repository page (https://github.com/WorkflowSim/WorkflowSim-1.0) and click 'Fork' on the top-right corner next to 'Star'. Then you will have your own branch of WorkflowSim and you can maintain your codes under this branch and commit your changes to it. In the video, we use 'chenww05' as an example and you will see a new repo called chenww05/WorkflowSim-1.0. Go to your repo, and copy the path. In this case, it is \"https://github.com/chenww05/WorkflowSim-1.0.git\". \r\n\r\n1.2 Install EGit\r\n\r\n\r\nOpen your Eclipse, go to 'Help'->'Install New Software', in 'Work with', choose '--All Available Sites', make sure you have EGit listed, otherwise click the item and install it. \r\n### 2. Use WorkflowSim without GitHub\r\n( If you don't want to contribute back to WorkflowSim with your codes, you can use WorkflowSim without GitHub. )\r\n\r\n\r\n1.3 Check out your source codes\r\n\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at http://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.","google":"UA-39466718-1","note":"Don't delete this file! It's used internally to help with page regeneration."}